def COLOR_MAP = [
  'SUCCESS': 'good',
  'FAILURE': 'danger',
]


pipeline {

    agent any
    
    tools{
      maven "MAVEN3"
      jdk "OracleJDK8"
    }
      
        environment {
        NEXUS_USER = 'admin'
        NEXUS_PASS = 'admin123'
        NEXUSIP = '172.172.62.232'
        NEXUSPORT = '8081'
        RELEASE_REPO ='vprofile-release'
        NEXUS_GRP_REPO ='vpro-maven-group'
        NEXUS_LOGIN= 'nexuslogin'
        CENTRAL_REPO = 'vpro-maven-central'
        SONARSERVER = 'sonarserver'
        SONARSCANNER ='sonarscanner'
        NEXUS_VERSION = 'nexus3'
        NEXUS_PROTOCOL = 'http'
        NEXUS_URL = '172.172.62.232:8081'
        NEXUS_REPOSITORY = 'vprofile-release'


   // AZURE_CREDENTIALS = credentials('azure-service-principal')
        AZURE_CREDENTIALS = credentials('azure-sp')
        ACR_SERVER = 'jenkinsacr2024.azurecr.io'
        IMAGE_NAME = 'artifactsimage'
        AZURE_SUBSCRIPTION_ID='e52f744d-5933-4c15-899b-8229737e4d75'
        AZURE_TENANT_ID='55f5f753-3c23-4837-82b5-8a9a1fe94045'
        CONTAINER_REGISTRY='jenkinsacr2024'
        RESOURCE_GROUP='jenkins-grp'
        REPO="repo name"
        TAG="${env.BUILD_NUMBER}"

    }
   stages{
      stage('BUILD'){
        steps {
            sh 'mvn install'
         }
         post{
          success {
            echo "Now Archiving"
            archiveArtifacts artifacts: '**/*.war'
          }
         }
      }
        stage('TEST'){
        steps {
            sh 'mvn test'
         }
       }
        stage('CheckStyle Analysis'){
        steps {
            sh 'mvn checkstyle:checkstyle'
         }

        }
        stage('CODE ANALYSIS with SONARQUBE') {
          
		         environment {
             scannerHome = tool "${SONARSCANNER}"
          }

          steps {
            withSonarQubeEnv("${SONARSERVER}") {
               sh '''${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=vprofile \
                   -Dsonar.projectName=vprofile-repo \
                   -Dsonar.projectVersion=1.0 \
                   -Dsonar.sources=src/ \
                   -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/ \
                   -Dsonar.junit.reportsPath=target/surefire-reports/ \
                   -Dsonar.jacoco.reportsPath=target/jacoco.exec \
                   -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml'''

               }    
          } 
        }  
       
       stage("Quality Gates"){
        steps{
          timeout(time: 1, unit: 'HOURS'){
          waitForQualityGate abortPipeline: true
          }
        }
       }

       stage('ArtifactsUpload Nexus'){
        steps{
        nexusArtifactUploader(
        nexusVersion: 'nexus3',
        protocol: 'http',
        nexusUrl: '172.172.62.232:8081',
        groupId: 'QA',
        version: "${env.BUILD_ID}-${env.BUILD_TIMESTAMP}",
        repository: 'vprofile-release',
        credentialsId: "${NEXUS_LOGIN}",
        artifacts: [
            [artifactId: 'vprofile',
             classifier: '',
             file: 'target/vprofile-v2.war',
             type: 'war']
        ] )

        }
       }  


        // stage('Build Docker Image') {
        //     steps {
                
        //         //  'sh' docker.build("${ACR_SERVER}/${IMAGE_NAME}:${env.BUILD_NUMBER}", "Docker-files/app/multistage/ .")
        //              sh "docker build -t ${ACR_SERVER}/${IMAGE_NAME}:${env.BUILD_NUMBER} ./Docker-files/app/multistage"
                
        //     }
        // }

        // stage('Login to Azure') {
        //     steps {
              
        //           sh "az login --service-principal -u 3de0ffdc-d7b8-4e67-aa7e-bdddf96fe974 -p f4L8Q~Yzkx_wuHXALq5q4NV9UoSREqoP3qHg4bP6 --tenant 55f5f753-3c23-4837-82b5-8a9a1fe94045"
                  
                
        //     }
        // }

        // stage('Push Image to ACR') {
        //     steps {
        //        sh "docker push ${ACR_SERVER}/${IMAGE_NAME}:${env.BUILD_NUMBER}"
        //     }
        // }







   
        stage('Example') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'myAzureCredential', passwordVariable: 'AZURE_CLIENT_SECRET', usernameVariable: 'AZURE_CLIENT_ID')]) {
                            sh "az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID"
                            sh "az account set -s $AZURE_SUBSCRIPTION_ID"
                            sh "az acr login --name $CONTAINER_REGISTRY --resource-group $RESOURCE_GROUP"
                            sh "az acr build --image $REPO/$IMAGE_NAME:$TAG --registry $CONTAINER_REGISTRY --file Dockerfile . "
                        }
            }
        
    }


  

    // post { 
    //    always {
    //        echo 'Slack Notification.'
    //               slackSend channel: '#intigration_with_jenkins',
    //               color: COLOR_MAP[currentBuild.currentResult],
    //               message: "*${currentBuild.currentResult}:* Job ${env.JOB_NAME} build ${env.BUILD_NUMBER} \n more information at: ${env.BUILD_URL}"
    //      }
    //   }

  }
}



















// pipeline {
//     agent any

//     environment {
//         AZURE_SUBSCRIPTION_ID='99999999-9999-9999-9999-99999999'
//         AZURE_TENANT_ID='99999999-9999-9999-9999-99999999'
//         CONTAINER_REGISTRY='container registry name'
//         RESOURCE_GROUP='resource group'
//         REPO="repo name"
//         IMAGE_NAME="image name"
//         TAG="tag"
//     }

//     stages {
//         stage('Example') {
//             steps {
//                 withCredentials([usernamePassword(credentialsId: 'azure-sp', passwordVariable: 'AZURE_CLIENT_SECRET', usernameVariable: 'AZURE_CLIENT_ID')]) {
//                             sh "az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET -t $AZURE_TENANT_ID"
//                             sh "az account set -s $AZURE_SUBSCRIPTION_ID"
//                             sh "az acr login --name $CONTAINER_REGISTRY --resource-group $RESOURCE_GROUP"
//                             sh "az acr build --image $REPO/$IMAGE_NAME:$TAG --registry $CONTAINER_REGISTRY --file Dockerfile . "
//                         }
//             }
//         }
//     }
// }